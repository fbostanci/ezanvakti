#!/bin/bash
#
#
#
#                           Ezanvakti Sleep Yöntemi  Bileşeni 1.9
#

calisma_kodu="$1"

. @libdir@/@AD@/temel_islevler.bash
# ezanveri_denetle, renk_denetle, bugun, gun_animsat ve
# acilisa_baslatici_ekle temel_islevler.bash ile yuklendi.
acilisa_baslatici_ekle
# Kullanıcının kendi isteğiyle uygulamayı başlatması ile
# uygulamanın başlatıcısını ayırmak için özel kod denetimi yapıyoruz.
#
# Uygulama başlatıcısı ezanvakti-sleep bileşenini özel kodla çağırıyor.
# ACILISTA_BASLAT=0 ise de çıkış yapıyor.
#
# Kullanıcı kendi isteğiyle (ezanvakti komutuyla) bileşeni başlatabilir.
# ACILISTA_BASLAT=0 olması önemsenmez, beş vakit kipinde başlar.
[[ ${calisma_kodu} = 657a616e76616b7469 ]] && (( ! ACILISTA_BASLAT )) && exit 0
#                    657a616e76616b7469 = ezanvakti onaltılık sayı değeri

bilesen_yukle oynatici_yonetici
(( OYNATICI_DURAKLAT )) && bilesen_yukle oynatici_duraklat
renk_denetle

trap cikis_yap INT
cikis_yap() {
  echo
  exit 0
}

# ilk çalıştırmada pid dosyası varsa
# dosya içerisindeki pid değerini denetler.
#
# Pid etkinse çıkış yapar, değilse ya da
# pid dosyası yoksa kendi pid değerini
# dosyaya yazar çalışmaya başlar.
ezv_sleep_pid_denetle() {
  local mpid ypid=$$

  if [[ -f /tmp/.${AD}_sleep.pid && \
        -n $(ps -p "$( < /tmp/.${AD}_sleep.pid)" -o comm=) ]]
  then
      mpid="$( < /tmp/.${AD}_sleep.pid)"
      printf '%s: Yalnızca bir %s örneği çalışabilir. (pid: %d)\n' \
        "${AD}" "${AD}-sleep" "$mpid" >&2
      exit 1
  else
      printf "$ypid" > /tmp/.${AD}_sleep.pid
  fi
}

cuma_selasi() {
  local sela_vakti
  bugun

  sela_vakti=$(( ogle - SELA_OKUNMA_SURESI_FARKI * 60 ))
  # Uygulama çalıştığında sela_vakti
  # geçmiş ise fonksiyon çalışmasın.
  (( sela_vakti < UNIXSAAT )) && exit 0

  if (( $(( sela_vakti - 60 )) == UNIXSAAT ))
  then
      sleep $(( sela_vakti - $(date +%s) ))
  else
      sleep 59; cuma_selasi
  fi

  notify-send "${ILCE} için" \
    "Cuma Selası (Öğle: $ogle_n)\n Okuyan: ${SELA_OKUYAN}" \
    -i ezanvakti -u critical -t $EZAN_BILDIRIM_SURESI"000"

  if (( OYNATICI_DURAKLAT ))
  then
      oynatici_duraklat
      oynatici_calistir "${CUMA_SELASI}"
      oynatici_devam
  else
      oynatici_calistir "${CUMA_SELASI}"
  fi
  exit 0
}

ezan_oku() {
  local ileti
  clear

  case "${simdiki}" in
    İmsak|İftar|'Gün doğumu') ileti='vakti' ;;
    *) ileti='namazı vakti' ;;
  esac

  printf '%b%b\n' \
    "${RENK7}${RENK3}${ILCE}${RENK2} " \
    "için ${RENK3}${simdiki}${RENK2} ${ileti}${RENK5} ${vakit_saati_n}${RENK0}"

  notify-send "${ILCE} için" \
    "${simdiki} ${ileti}\n$vakit_saati_n" \
    -i ${AD} -t $EZAN_BILDIRIM_SURESI"000"
  # Geçerli vaktin ezanı okunması
  # istenmiyorsa 1 dakikalık bekleme yapıyor.
  # aksi halde 1 dakika boyunca fonksiyon tekrar edecek.
  (( ezan_okunsun_mu )) || { sleep 1m; return 0; }

  # Oynatıcı duraklatma etkin mi ezan okumadan değeri
  # denetle ve fonksiyonu çağır. (oynatici_duraklat.bash)
  if (( OYNATICI_DURAKLAT ))
  then
      oynatici_duraklat
      oynatici_calistir "${vakit_ezani}"
      (( EZAN_DUASI_OKU )) && oynatici_calistir "${EZAN_DUASI}"
      oynatici_devam
  else
      oynatici_calistir "${vakit_ezani}"
      (( EZAN_DUASI_OKU )) && oynatici_calistir "${EZAN_DUASI}"
  fi
  clear
}

# Vakit ezanı okunmadan önce  anımsatma
vakit_animsat() {
  local dakika_saniye animsatici_saniye ileti

  # Kullanıcı anımsatma değerini sıfır olarak belirlememişse
  (( VAKIT_ANIMSAT )) && {
    ezan_vakitlerini_al
    # VAKIT_ANIMSAT dk. değerini saniyeye çevirdik.
    dakika_saniye=$(( VAKIT_ANIMSAT * 60 ))
    animsatici_saniye=$(( vakit_saati - dakika_saniye ))

    if (( $(( animsatici_saniye - 60 )) == UNIXSAAT ))
    then
        sleep $(( animsatici_saniye - $(date +%s) ))
    else
        sleep 59; vakit_animsat
    fi

    case "${simdiki}" in
      İmsak|İftar) ileti='vakti olacak.' ;;
      'Gün doğumu') simdiki='Güneş'; ileti='doğacak.' ;;
      *) ileti='ezanı okunacak.' ;;
    esac

    notify-send "${AD^}" "$VAKIT_ANIMSAT dakika sonra $simdiki ${ileti}" \
      -u critical -t $BILGI_BILDIRIM_SURESI"000" -i ${AD}

    (( SESLI_UYARI )) && oynatici_calistir "${UYARI_SESI}"
    # Tekrardan aynı uyarıyı vermesin diye
    # 1 dk bekletiyoruz.
    sleep 1m; vakit_animsat
  }
}

ezan_vakitlerini_al() {
  bugun

  if (( UNIXSAAT <= sabah ))
  then
      if (( ACILISTA_BASLAT == 2 ))
      then
          simdiki='İmsak'
      else
          simdiki='Sabah'
      fi
      vakit_ezani="${SABAH_EZANI}"
      vakit_saati_n=$sabah_n
      vakit_saati=$(( sabah + EZAN_OKUNMA_SURESI_FARKI ))
      ezan_okunsun_mu=${SABAH_EZANI_OKU}

  elif (( UNIXSAAT <= gunes ))
  then
      simdiki='Gün doğumu'
      vakit_saati_n=${gunes_n}
      vakit_saati=$gunes
      ezan_okunsun_mu=0

  elif (( UNIXSAAT <= ogle ))
  then
      if (( ACILISTA_BASLAT == 2 ))
      then
          simdiki='İftar'
          vakit_saati_n=${aksam_n}
          vakit_saati=$(( aksam + EZAN_OKUNMA_SURESI_FARKI ))
      else
          simdiki='Öğle'
          vakit_saati_n=$ogle_n
          vakit_saati=$(( ogle + EZAN_OKUNMA_SURESI_FARKI ))
      fi
      # ramazan kipinde burayı zaten
      # kullanmayacak. Aynı durum
      # aşağıdaki benzer vakitlerde de var.
      vakit_ezani="${OGLE_EZANI}"
      ezan_okunsun_mu=${OGLE_EZANI_OKU}

  elif (( UNIXSAAT <= ikindi ))
  then
      if (( ACILISTA_BASLAT == 2 ))
      then
          simdiki='İftar'
          vakit_saati_n=${aksam_n}
          vakit_saati=$(( aksam + EZAN_OKUNMA_SURESI_FARKI ))
      else
          simdiki='İkindi'
          vakit_saati_n=$ikindi_n
          vakit_saati=$(( ikindi + EZAN_OKUNMA_SURESI_FARKI ))
      fi
      vakit_ezani="${IKINDI_EZANI}"
      ezan_okunsun_mu=${IKINDI_EZANI_OKU}

  elif (( UNIXSAAT <= aksam ))
  then
      if (( ACILISTA_BASLAT == 2 ))
      then
          simdiki='İftar'
      else
          simdiki='Akşam'
      fi
      vakit_ezani="${AKSAM_EZANI}"
      vakit_saati_n=$aksam_n
      vakit_saati=$(( aksam + EZAN_OKUNMA_SURESI_FARKI ))
      ezan_okunsun_mu=${AKSAM_EZANI_OKU}

  elif (( UNIXSAAT <= yatsi ))
  then
      if (( ACILISTA_BASLAT == 2 ))
      then
          simdiki='İmsak'
          vakit_saati_n=$ysabah_n
          vakit_saati=$(( ysabah + EZAN_OKUNMA_SURESI_FARKI ))
      else
          simdiki='Yatsı'
          vakit_saati_n=$yatsi_n
          vakit_saati=$(( yatsi + EZAN_OKUNMA_SURESI_FARKI ))
      fi
      vakit_ezani="${YATSI_EZANI}"
      ezan_okunsun_mu=${YATSI_EZANI_OKU}

  elif (( UNIXSAAT <= yeni_gun ))
  then
      if (( ACILISTA_BASLAT == 2 ))
      then
          simdiki='İmsak'
      else
          simdiki='Sabah (yarın)'
      fi
      vakit_ezani="${SABAH_EZANI}"
      vakit_saati_n=$ysabah_n
      vakit_saati=$(( ysabah + EZAN_OKUNMA_SURESI_FARKI ))
      ezan_okunsun_mu=${SABAH_EZANI_OKU}
  fi
}

# Vakitlerde ezan okunmasının ve bildirimin
# yönetildiği özyinelemeli ana fonksiyon.
ezanvakti_bekle() {
  ezan_vakitlerini_al

  printf '%b %b' "${RENK7}${RENK4}${simdiki} vakti için bekleniyor...${RENK0}"\
                 "${RENK2}(${RENK5}${vakit_saati_n}${RENK2})${RENK0}\r"
  # son 60 saniye için 1. koşul sleep
  # diğer süre için 2. koşul sleep
  #
  # 2. koşul her 59 saniyede bir
  # fonksiyonu tekrardan çağıracak.
  if (( $(( vakit_saati - 60 )) == UNIXSAAT ))
  then
      sleep $(( vakit_saati - $(date +%s) ))
  else
      sleep 59; ezanvakti_bekle
  fi
  ezan_oku; ezanvakti_bekle
}

ezv_sleep_pid_denetle; ezanveri_denetle
gun_animsat; vakit_animsat &
# Haftanın 5. günü ve CUMA_SELASI_OKU=1 ise
(( $(date +%u) == 5 && CUMA_SELASI_OKU )) && cuma_selasi &
ezanvakti_bekle

# vim: set ft=sh ts=2 sw=2 et:
