#
#
#
#                           Ezanvakti Temel İşlevler Bileşeni 1.4
#

AD="@AD@"
SURUM="@SURUM@"
DUZELTME="@DUZELTME@"

BILESEN_DIZINI="@libdir@/${AD}"
VERI_DIZINI="@datadir@/${AD}"

EZANVAKTI_DIZINI="${XDG_CONFIG_HOME:-$HOME/.config}/${AD}"
EZANVAKTI_AYAR="${EZANVAKTI_DIZINI}/ayarlar"

[[ ! -d   ${EZANVAKTI_DIZINI} ]] && mkdir -p "${EZANVAKTI_DIZINI}"
[[ ! -f   ${EZANVAKTI_AYAR}   ]] &&
  sed "s:\(EZANVERI_DIZINI=\).*:\1\'${EZANVAKTI_DIZINI}\':" < @sysconfdir@/${AD}/ayarlar > "${EZANVAKTI_AYAR}"

# Öntanımlı ayarları al.
. @sysconfdir@/${AD}/ayarlar

#  Öntanımlı ayarlardan gelen değerlerin üzerine yazılacak.
#
# Kullanıcı ayarlarını al.
. "${EZANVAKTI_AYAR}" ||
  { printf '%s: %s dosyası okunabilir değil.\n' "${AD}" "${EZANVAKTI_AYAR}"; exit 1; }

EZANVERI="${EZANVAKTI_DIZINI}/${EZANVERI_ADI}"
MPLAYER="mplayer -really-quiet -softvol -volume $SES"

# Karar verme önceliği env olarak tanımlıysa RENK değişkenine verildi.
# RENK null ise ayarlar dosyasından okunan RENK_KULLAN değerini kullanacak.
#
# Renk kullan sıfırsa renkleri sıfırla.
function renk_denetle() {
  [[ ! -t 1 ]] || [[ ! $DISPLAY ]] && { RENK_KULLAN=0; RENK=0; }
    (( ! ${RENK:-RENK_KULLAN} )) && {
      RENK0=''
      RENK1=''
      RENK2=''
      RENK3=''
      RENK4=''
      RENK5=''
      RENK6=''
      RENK7=''
      RENK8=''
    }
}

# Uçbirim pencere başlığını belirle.
function ucbirim_basligi() {
  [[ ! -t 1 ]] || [[ ! $DISPLAY ]] && return 0

   case $TERM in
     rxvt*|xterm*|aterm)
       echo -n -e "\033]0;${AD^} ${SURUM}: $@\007" ;;
   esac
}

declare -A YUKLENEN_BILESENLER
# http://git.archlinux.fr/yaourt.git/tree/src/lib/util.sh.in ( load_lib() )
function bilesen_yukle() {
  while [[ $1 ]]
  do
    (( YUKLENEN_BILESENLER[$1] )) && return 0

    if [[ ! -r "${BILESEN_DIZINI}/$1.bash" ]]
    then
        printf "$1.bash dosyası bulunamadı.\n"
        exit 1
    fi

    . "${BILESEN_DIZINI}/$1.bash" || printf "$1.bash bileşeninde sorun var.\n"
    YUKLENEN_BILESENLER[$1]=1
    shift
  done
}

function hatali_kullanim() {
  printf "%s: -- \`%s' geçerli değil. \nYardım için '%s --yardım' kullanın.\n" "${AD}" "$1" "${AD}" >&2
  exit 1
}

# Ezanveri dosyası gerektiren işlemlerde ilk önce bu fonksiyon çağrılacak.
#
# ezanveri dosyasının kullanıldığı işlemler için olumsuz durumları denetle.
function ezanveri_denetle() {
  local ksatir

  [[ ! -f ${EZANVERI} ]] && { # ezanveri dosyası yoksa
    (( GUNCELLEME_YAP )) && { bilesen_yukle guncelleyici; guncelleme_yap; } || {
      printf '%s: %s dosyası bulunamadı.\n' "${AD}" "${EZANVERI}"
      exit 1
    }
  }

  # Bugüne ait tarih ezanveri dosyasında yoksa
  [[ -z $(grep -o $(date +%d.%m.%Y) "${EZANVERI}") ]] && {
    (( GUNCELLEME_YAP )) && { bilesen_yukle guncelleyici; guncelleme_yap; } || {
      printf '%s: %s dosyası güncel değil.\n' "${AD}" "${EZANVERI}"
      exit 1
    }
  }

  # ezanveri dosyasından tarih bloğunu ayıklayıp son tarih satır no dan bugünkünü çıkardık.
  ksatir=$(gawk -v tarih=$(date +%d.%m.%Y) '/^[0-9][0-9]\.[0-9]*\.[0-9]*/ {if($1 ~ tarih) bsatir = NR}; \
    /^[0-9][0-9]\.[0-9]*\.[0-9]*/ {} END {tsatir = NR}; END {print(tsatir-bsatir)}' "${EZANVERI}")
  let ksatir++

  (( ksatir <= 7 )) && { # sonuç 7 ya da 7'den küçükse
    (( GUNCELLEME_YAP )) && { bilesen_yukle guncelleyici; guncelleme_yap; }

    # Betiğin mevcut oturum boyunca sadece ilk çalışmada bildirim vermesi
    # için çerez dosya denetimi ekledik. Gün değişimi durumu için (mevcut oturum devam ediyorsa)
    # ayrıca dosyaya tarih uzantısı da ekledik.
    [[ ! -f /tmp/eznvrgncldntle_$(date +%d%m%y) ]] && {
      notify-send "${AD^} ${SURUM}" "${EZANVERI_ADI} dosyanız\n\t$ksatir gün\nsonra güncelliğini yitirecek." \
        -i ${VERI_DIZINI}/simgeler/ezanvakti.png -t $GUNCELLEME_BILDIRIM_SURESI"000" -h int:transient:1
      :> /tmp/eznvrgncldntle_$(date +%d%m%y)
    }
  }
}

# Bugünün ezan vakitlerini ayıkla ve değerleri vakit değişkenlerine ata.
function bugun() {
  TARIH=$(date +%d.%m.%Y)
  SAAT=$(date +%H:%M)

  # 08, 09 için oluşan sekizli sayı hatasının önüne geçmek için saatin,
  # sayısal karşılaştırmalarda kullanılması için saati UNIX ikilik saatine çevirdik.
  UNIXSAAT=$(date -d "$SAAT" +%s)

  export $(gawk 'BEGIN{tarih = strftime("%d.%m.%Y")} {if($1 ~ tarih) \
    {printf \
    "sabah_n=%s\ngunes_n=%s\nogle_n=%s\nikindi_n=%s\naksam_n=%s\nyatsi_n=%s"\
    , $2,$3,$4,$5,$6,$7}}' "${EZANVERI}")

  sabah=$(date -d "$sabah_n" +%s)
  gunes=$(date -d "$gunes_n" +%s)
  ogle=$(date -d "$ogle_n" +%s)
  ikindi=$(date -d "$ikindi_n" +%s)
  aksam=$(date -d "$aksam_n" +%s)
  yatsi=$(date -d "$yatsi_n" +%s)
  yeni_gun=$(( $(date -d '23:59:59' +%s) + 1 ))
}

# Eğer hedef süre bugün içerisindeyse bu fonksiyon kullanılacak.
function bekleme_suresi() {
  bekle=$(( $(date -d "$1" +%s) - $(date +%s) + EZAN_OKUNMA_SURESI_FARKI ))
}

# Eğer hedef süre yarına aitse bu fonksiyon kullanılacak.
function bekleme_suresi_yarin() {
  bekle=$(( 86400 - $(date +%s) + $(date -d "$1" +%s) + EZAN_OKUNMA_SURESI_FARKI ))
}

# bekleme süresi fonksiyonlarından gelen bekle değerini
# saat, dakika ve saniyeye çeviren fonksiyon
function kalan() {
  kalan_sure=$(printf '%02d saat : %02d dakika : %02d saniye' \
    $(( bekle / 3600 )) $(( bekle % 3600 / 60 )) $(( bekle % 60 )) )
}

# vim: set ft=sh ts=2 sw=2 et:
