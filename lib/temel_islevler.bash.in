#!/bin/bash
#
#
#                           Ezanvakti Temel İşlevler Bileşeni
#

declare -r AD="@AD@"
SURUM="@SURUM@"
DUZELTME="@DUZELTME@"

declare -r BILESEN_DIZINI="@libdir@/${AD}"
declare -r VERI_DIZINI="@datadir@/${AD}"

EZANVAKTI_DIZINI="${XDG_CONFIG_HOME:-$HOME/.config}/${AD}"
EZANVAKTI_ONT_AYAR=@sysconfdir@/${AD}.conf
EZANVAKTI_AYAR="${EZANVAKTI_DIZINI}/ayarlar"


[[ ! -d ${EZANVAKTI_DIZINI} ]] && mkdir -p "${EZANVAKTI_DIZINI}"
[[ ! -f ${EZANVAKTI_AYAR}   ]] && sed "s:\(EZANVERI_DIZINI=\).*:\1\'${EZANVAKTI_DIZINI}\':" \
  < "${EZANVAKTI_ONT_AYAR}" > "${EZANVAKTI_AYAR}"
declare -A RADYOLAR TVLER
# Öntanımlı ayarları al.
. "${EZANVAKTI_ONT_AYAR}"
#  Öntanımlı ayarlardan gelen değerlerin üzerine yazılacak.
#
# Kullanıcı ayarlarını al.
. "${EZANVAKTI_AYAR}" || {
  printf '%s: %s dosyası okunabilir değil ya da hatalı.\n' \
    "${AD}" "${EZANVAKTI_AYAR}"
  exit 1
}

EZANVERI="${EZANVAKTI_DIZINI}/${EZANVERI_ADI}"
declare -A YUKLENEN_BILESENLER

# arayüz ve bileşenlerin
# çoklu çalışmasını önlemek için
# denetleme fonksiyonu
#
# ilk çalıştırmada pid dosyası varsa
# dosya içerisindeki pid değerini denetler.
#
# Pid etkinse çıkış yapar, değilse ya da
# pid dosyası yoksa kendi pid değerini
# dosyaya yazar çalışmaya başlar.
pid_denetle() {
  # p=0: ezanvakti-sleep
  # p=1: arayuz1
  # p=2: arayuz2
  # p=3: arayuz3
  # p=4: eylem_menu
  local mpid p="$1" ypid=$$

  case $p in
    0) p='sleep' ;;
    1) p='yad_arayuz1' ;;
    2) p='yad_arayuz2' ;;
    3) p='yad_arayuz3' ;;
    4) p='yad_eylem_menu' ;;
    *) printf '%s: desteklenmeyen istek: %s\n' "${AD}" "${p}" >&2; return 1 ;;
  esac

  if [[ -f /tmp/.${AD}_${p}.pid && \
        -n $(ps -p $( < /tmp/.${AD}_${p}.pid) -o comm=) ]]
  then
      mpid="$( < /tmp/.${AD}_${p}.pid)"
      printf '%s: Yalnızca bir %s örneği çalışabilir. (pid: %d)\n' \
        "${AD}" "${p}" "$mpid"  >&2
      exit 1
  else
      printf "$ypid" > /tmp/.${AD}_${p}.pid
  fi
}

acilisa_baslatici_ekle() {
  local baslatici_dizini baslatici

  baslatici_dizini="${XDG_CONFIG_HOME:-$HOME/.config}/autostart/"
  baslatici="${baslatici_dizini}/${AD}.desktop"

  [[ ! -d ${baslatici_dizini} ]] && mkdir -p "${baslatici_dizini}"
  if (( ACILISTA_BASLAT ))
  then
      if [[ ! -f ${baslatici} ]]
      then
          printf '%s\n%s\n%s\n%s\n%s\n%s'\
            '[Desktop Entry]'\
            'Type=Application'\
            'Name=@AD@'\
            'Exec=@libdir@/@AD@/@AD@-sleep 657a616e76616b7469'\
            'Comment=GNU/Linux icin ezan vakti bildirici'\
            'Terminal=false' > "${baslatici}"
          chmod 755 "${baslatici}"
      fi
  else
      [[ -f ${baslatici} ]] && rm -f "${baslatici}"
  fi
}

# Karar verme önceliği env olarak tanımlıysa RENK değişkenine verildi.
# RENK null ise ayarlar dosyasından okunan RENK_KULLAN değerini kullanacak.
#
# RENK_KULLAN=0 ise renkleri sıfırla.
renk_denetle() {
  [[ ! -t 1 ]] || [[ ! $DISPLAY ]] && { RENK_KULLAN=0; RENK=0; }
    (( ! ${RENK:-RENK_KULLAN} )) && {
      RENK0=''; RENK1=''; RENK2=''
      RENK3=''; RENK4=''; RENK5=''
      RENK6=''; RENK7=''; RENK8=''
    }
}

# Uçbirim pencere başlığını belirle.
ucbirim_basligi() {
  [[ ! -t 1 ]] || [[ ! $DISPLAY ]] && return 0

   case $TERM in
     rxvt*|xterm*|aterm)
       echo -n -e "\033]0;${AD^}: $@\007" ;;
   esac
}

# http://git.archlinux.fr/yaourt.git/tree/src/lib/util.sh.in ( load_lib() )
bilesen_yukle() {
  while [[ $1 ]]
  do
    (( YUKLENEN_BILESENLER[$1] )) && return 0

    if [[ ! -r "${BILESEN_DIZINI}/$1.bash" ]]
    then
        printf "$1.bash dosyası bulunamadı.\n"
        exit 1
    fi

    . "${BILESEN_DIZINI}/$1.bash" || printf "$1.bash bileşeninde sorun var.\n"
    YUKLENEN_BILESENLER[$1]=1
    shift
  done
}

gorsel_guncelleme_yap() {

  if  [[ -x $(type -p yad) ]]
  then
      (
        guncelleme_yap "$1"
      ) | yad  --progress --undecorated --progress-text="${EZANVERI_ADI} güncelleniyor" \
               --pulsate --auto-close --width=300 --center --fixed \
               --no-buttons --skip-taskbar
  else
      guncelleme_yap "$1"
  fi
}

# Dini günler için anımsatıcı
gun_animsat() {
  # ezanvakti-sleep ve arayuz{1,3} ortak kullanıyor.
  # arayüzler için bildirim vermeyi kapatıyoruz. (h)
  # varsayılan bildirim_ver açık. (e)
  local bildirim_ver="${1:-e}"
  local gunler="${VERI_DIZINI}/veriler/gunler"
  # Eğer GUN_ANIMSAT değeri sıfır değilse girilen saniye değerini
  # bildirimin bekleme süresi olarak kullan.
  (( GUN_ANIMSAT )) && {
    if grep -q "^$(date +%d.%m.%Y)" "${gunler}"
    then
        ozel_ileti='\n\nBugün:  <b>'
        ozel_ileti+="$(grep $(date +%d.%m.%Y) "${gunler}" | cut -d' ' -f2-)</b>"
    elif grep -q "^$(date -d 'tomorrow' +%d.%m.%Y)" "${gunler}"
    then
        ozel_ileti='\n\nYarın:  <b>'
        ozel_ileti+="$(grep $(date -d 'tomorrow' +%d.%m.%Y) "${gunler}" | cut -d' ' -f2-)</b>"
    else
        ozel_ileti=''
    fi

    case "${bildirim_ver}" in
    h) return 0 ;;
    e) # eğer ozel_ileti boş (null) dönmemişse bildirimi gönder.
       [[ -n ${ozel_ileti} ]] && {
         notify-send "${AD^}" "${ozel_ileti}" \
           -a ${AD} -t $GUN_ANIMSAT"000" -i ${AD}
       } ;;
    esac
  }
}

guncelleme_yapilsin_mi() {
  if (( GUNCELLEME_YAP ))
  then
      bilesen_yukle guncelleyici
      guncelleme_yap
  else
      printf '%s: %s dosyası güncel değil ya da yok.\n' \
        "${AD}" "${EZANVERI}"
      exit 1
  fi
}

# Ezanveri dosyası gerektiren işlemlerde ilk önce bu fonksiyon çağrılacak.
#
# ezanveri dosyasının kullanıldığı işlemler için olumsuz durumları denetle.
ezanveri_denetle() {
  local ksatir

  # ezanveri dosyası yoksa
  [[ ! -f ${EZANVERI} ]] && guncelleme_yapilsin_mi
  # Bugüne ait tarih ezanveri dosyasında yoksa
  if ! grep -qo "^$(date +%d.%m.%Y)" "${EZANVERI}"
  then guncelleme_yapilsin_mi; fi
  # Yarına ait tarih ezanveri dosyasında yoksa
  # ysabah ve ysabah_n için gerekli.
  if ! grep -qo "^$(date -d tomorrow '+%d.%m.%Y')" "${EZANVERI}"
  then guncelleme_yapilsin_mi; fi

  # ezanveri dosyasından tarih bloğunu ayıklayıp
  # son tarih satır no dan bugünkünü çıkardık.
  ksatir=$(gawk '$1 ~ /^[0-9]{2}.[0-9]{2}.[0-9]{4}/ {t++} END{tsatir=t} \
                 {if($1 ~ strftime("%d.%m.%Y")) bsatir=t} \
                 END{print(tsatir-bsatir+1)}' "${EZANVERI}")

  (( ksatir <= 7 )) && { # sonuç 7 ya da 7'den küçükse
    (( GUNCELLEME_YAP )) && { bilesen_yukle guncelleyici; guncelleme_yap; }

    # Betiğin mevcut oturum boyunca sadece ilk çalışmada bildirim vermesi
    # için çerez dosya denetimi ekledik. Günde bir uyarı vermesi için
    # ayrıca dosyaya tarih uzantısı da ekledik.
    [[ ! -f /tmp/.${AD}_eznvrgncldntle_$(date +%d%m%y) ]] && {
      notify-send "${AD^}" \
        "${EZANVERI_ADI} dosyanız\n\t$ksatir gün\nsonra güncelliğini yitirecek." \
        -a ${AD} -i ${AD} -t $GUNCELLEME_BILDIRIM_SURESI"000"
      :> /tmp/.${AD}_eznvrgncldntle_$(date +%d%m%y)
    }
  }
}

# Bugünün ezan vakitlerini ayıkla ve değerleri vakit değişkenlerine ata.
bugun() {
  TARIH=$(date '+%d.%m.%Y')
  local YTARIH=$(date -d tomorrow '+%d.%m.%Y') SAAT=$(date +%H:%M)

  # 08, 09 için oluşan sekizli sayı hatasının önüne geçmek için saatin,
  # sayısal karşılaştırmalarda kullanılması için saati UNIX ikilik saatine çevirdik.
  UNIXSAAT=$(date -d "$SAAT" +%s)
  # bugünün vakitlerini ve yarın sabah vakitlerini
  # ilgili değişkenlere atar.
  export $(gawk -v tarih=$TARIH -v ytarih=$YTARIH '{if($1 ~ tarih) \
    {printf \
    "sabah_n=%s\ngunes_n=%s\nogle_n=%s\nikindi_n=%s\naksam_n=%s\nyatsi_n=%s"\
    , $2,$3,$4,$5,$6,$7};if($1 ~ ytarih) {printf "\nysabah_n=%s",$2}}' "${EZANVERI}")

  sabah=$(date -d "$sabah_n" +%s)
  gunes=$(date -d "$gunes_n" +%s)
  ogle=$(date -d "$ogle_n" +%s)
  ikindi=$(date -d "$ikindi_n" +%s)
  aksam=$(date -d "$aksam_n" +%s)
  yatsi=$(date -d "$yatsi_n" +%s)
  ysabah=$(date -d "tomorrow $ysabah_n" +%s)
  yeni_gun=$(date -d 'tomorrow 00:00' +%s)
}

# Girilen UNIXSAAT ile şimdiki UNIXSAAT
# arasındaki farkı hesaplar.
bekleme_suresi() {
  bekle=$(( $1 - $(date +%s) + EZAN_OKUNMA_SURESI_FARKI ))
  # kalan_sure=$(date -d@$bekle '+%H saat : %M dakika : %S saniye')
  kalan_sure=$(printf '%02d saat : %02d dakika : %02d saniye' \
                      $(( bekle / 3600 )) \
                      $(( bekle % 3600 / 60 )) \
                      $(( bekle % 60 )) )
}

internet_erisimi_var_mi() {
  if [[ -x $(type -p wget) ]]
  then
      if wget -q --spider http://google.com > /dev/null
      then return 0
      else return 1
      fi

  elif [[ -x $(type -p curl) ]]
  then
      if curl -s --head --request GET www.google.com | grep "200 OK" > /dev/null
      then return 0
      else return 1
      fi
  else
      printf '%s: Bu özellik wget ya da curl gerektirmektedir.\n' "${AD}" >&2
      exit 1
  fi
}

indirici() {
  if [[ -x $(type -p wget) ]]
  then
      wget --quiet --tries=3 "$1" -O -
  elif [[ -x $(type -p curl) ]]
  then
      curl -s "$1"
  else
      printf '%s: Bu özellik wget ya da curl gerektirmektedir.\n' "${AD}" >&2
      exit 1
  fi
}

# vim: set ft=sh ts=2 sw=2 et:
